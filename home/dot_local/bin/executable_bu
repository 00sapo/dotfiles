#!/usr/bin/env python3

import argparse
import os
import shutil
import glob
import time
from datetime import datetime


def get_backup_name(path):
    """Return the backup base name for a file or directory."""
    base = os.path.basename(os.path.abspath(path))
    return f"{base}.bak"


def get_backup_pattern(path):
    """Return the glob pattern for all backups of a file or directory."""
    dirname = os.path.dirname(os.path.abspath(path))
    base = get_backup_name(path)
    return os.path.join(dirname, f"{base}.*")


def get_backup_dir(path):
    """Return the directory where the backups are stored (same as original)."""
    return os.path.dirname(os.path.abspath(path))


def list_backups(path):
    """Return a sorted list of (timestamp, backup_path) tuples for the given file/dir."""
    pattern = get_backup_pattern(path)
    backups = []
    for backup_path in glob.glob(pattern):
        try:
            ts = backup_path.rsplit(".", 1)[-1]
            # Accept only numeric timestamps
            if ts.isdigit():
                backups.append((int(ts), backup_path))
        except Exception:
            continue
    backups.sort(reverse=True)
    return backups


def backup(path, replace=False):
    """Create a backup of the given file or directory."""
    if not os.path.exists(path):
        print(f"Error: {path} does not exist.")
        return False

    backup_dir = get_backup_dir(path)
    base = get_backup_name(path)
    timestamp = int(time.time())
    backup_name = f"{base}.{timestamp}"
    backup_path = os.path.join(backup_dir, backup_name)

    if replace:
        # Remove all previous backups
        for _, bkp in list_backups(path):
            try:
                if os.path.isdir(bkp):
                    shutil.rmtree(bkp)
                else:
                    os.remove(bkp)
            except Exception as e:
                print(f"Warning: Could not remove {bkp}: {e}")

    try:
        if os.path.isdir(path):
            shutil.copytree(path, backup_path)
        else:
            shutil.copy2(path, backup_path)
        print(f"Backup created: {backup_path}")
        return True
    except Exception as e:
        print(f"Error creating backup: {e}")
        return False


def restore(path, version=None):
    """Restore the file or directory from backup."""
    backups = list_backups(path)
    if not backups:
        print(f"No backups found for {path}")
        return False

    if version is not None:
        # Find backup with matching timestamp
        backup_path = None
        for ts, bkp in backups:
            if ts == version:
                backup_path = bkp
                break
        if not backup_path:
            print(f"No backup with timestamp {version} found for {path}")
            return False
    else:
        # Use the latest backup
        backup_path = backups[0][1]

    try:
        if os.path.isdir(backup_path):
            if os.path.exists(path):
                shutil.rmtree(path)
            shutil.copytree(backup_path, path)
        else:
            shutil.copy2(backup_path, path)
        print(f"Restored {path} from {backup_path}")
        return True
    except Exception as e:
        print(f"Error restoring {path}: {e}")
        return False


def cleanup(path):
    """Remove all backups for the given file or directory."""
    backups = list_backups(path)
    if not backups:
        print(f"No backups found for {path}")
        return False
    for _, bkp in backups:
        try:
            if os.path.isdir(bkp):
                shutil.rmtree(bkp)
            else:
                os.remove(bkp)
            print(f"Removed backup: {bkp}")
        except Exception as e:
            print(f"Error removing backup {bkp}: {e}")
    return True


def show_backups(path):
    """List all backups for the given file or directory."""
    backups = list_backups(path)
    if not backups:
        print(f"No backups found for {path}")
        return
    print(f"Backups for {path}:")
    for ts, bkp in backups:
        dt = datetime.fromtimestamp(ts).strftime("%Y-%m-%d %H:%M:%S")
        print(f"  {bkp} (created {dt})")


def main():
    parser = argparse.ArgumentParser(
        description="Backup and restore files or directories."
    )
    subparsers = parser.add_subparsers(dest="command", required=True)

    # Backup
    p_backup = subparsers.add_parser("backup", help="Backup files or directories")
    p_backup.add_argument("targets", nargs="+", help="Files or directories to backup")
    p_backup.add_argument(
        "-r", "--replace", action="store_true", help="Replace all previous backups"
    )

    # Restore
    p_restore = subparsers.add_parser(
        "restore", help="Restore files or directories from backup"
    )
    p_restore.add_argument("targets", nargs="+", help="Files or directories to restore")
    p_restore.add_argument(
        "-v",
        "--version",
        type=int,
        help="Timestamp of backup to restore (default: latest)",
    )

    # Cleanup
    p_cleanup = subparsers.add_parser(
        "cleanup", help="Remove all backups for specified files or directories"
    )
    p_cleanup.add_argument(
        "targets", nargs="+", help="Files or directories whose backups to remove"
    )

    # List
    p_list = subparsers.add_parser(
        "list", help="List all backups for specified files or directories"
    )
    p_list.add_argument(
        "targets", nargs="+", help="Files or directories to list backups for"
    )

    args = parser.parse_args()
    success = True

    if args.command == "backup":
        for t in args.targets:
            if not backup(t, replace=args.replace):
                success = False

    elif args.command == "restore":
        for t in args.targets:
            if not restore(t, version=args.version):
                success = False

    elif args.command == "cleanup":
        for t in args.targets:
            if not cleanup(t):
                success = False

    elif args.command == "list":
        for t in args.targets:
            show_backups(t)

    exit(0 if success else 1)


if __name__ == "__main__":
    main()
