#!/usr/bin/env python3

import tkinter as tk
import argparse

# Define a dictionary of color names with their corresponding hex values
COLOR_DICT = {
    "red": "#FF0000",
    "green": "#00FF00",
    "blue": "#0000FF",
    "yellow": "#FFFF00",
    "cyan": "#00FFFF",
    "magenta": "#FF00FF",
    "gray": "#7F7F7F",
    "black": "#000000",
    "white": "#FFFFFF",
}


class CrosshairApp:
    def __init__(self, root, thickness, color):
        self.root = root
        self.root.withdraw()

        self.period = 16  # polling period in milliseconds
        self.colour = color
        self.thickness = thickness

        self.hlineL = tk.Toplevel(root)
        self.hlineR = tk.Toplevel(root)
        self.vlineT = tk.Toplevel(root)
        self.vlineB = tk.Toplevel(root)

        for line in [self.hlineL, self.hlineR, self.vlineT, self.vlineB]:
            line.overrideredirect(True)
            line.attributes("-topmost", True)
            line.configure(bg=self.colour)

        self.move_offscreen()
        self.update_crosshairs()

    def move_offscreen(self):
        for line in [self.hlineL, self.hlineR, self.vlineT, self.vlineB]:
            line.geometry("0x0+-1+-1")

    def update_crosshairs(self):
        x, y = self.root.winfo_pointerxy()

        if x == -1 or y == -1:
            self.move_offscreen()
        else:
            screen_width = self.root.winfo_screenwidth()
            screen_height = self.root.winfo_screenheight()

            self.hlineL.geometry(f"{x}x{self.thickness}+{0 if x > 0 else -1}+{y}")
            self.hlineR.geometry(f"{screen_width - x}x{self.thickness}+{x + 1}+{y}")

            self.vlineT.geometry(f"{self.thickness}x{y}+{x}+{0 if y > 0 else -1}")
            self.vlineB.geometry(f"{self.thickness}x{screen_height - y}+{x}+{y + 1}")

        self.root.after(self.period, self.update_crosshairs)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Full-screen crosshairs")
    parser.add_argument(
        "-t", "--thickness", type=int, default=3, help="Thickness of the crosshairs"
    )
    parser.add_argument(
        "-c", "--color", type=str, default="gray", help="Color of the crosshairs"
    )
    args = parser.parse_args()

    # Determine the color to use
    if args.color in COLOR_DICT:
        color = COLOR_DICT[args.color]
    elif args.color.startswith("#"):
        color = args.color
    else:
        print(
            f"Warning: Color '{args.color}' not recognized. Using default color 'gray'."
        )
        color = COLOR_DICT["gray"]

    root = tk.Tk()
    app = CrosshairApp(root, args.thickness, color)
    root.mainloop()
